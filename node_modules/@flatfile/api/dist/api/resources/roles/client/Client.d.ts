/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Flatfile from "../../..";
export declare namespace Roles {
    interface Options {
        environment?: core.Supplier<environments.FlatfileEnvironment | string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        fetcher?: core.FetchFunction;
        streamingFetcher?: core.StreamingFetchFunction;
    }
    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
    }
}
export declare class Roles {
    protected readonly _options: Roles.Options;
    constructor(_options?: Roles.Options);
    /**
     * Assign an existing role to the specified actor in the specified resource context
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     */
    assign(roleId: string, request: Flatfile.AssignRoleRequest, requestOptions?: Roles.RequestOptions): Promise<Flatfile.AssignRoleResponse>;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
