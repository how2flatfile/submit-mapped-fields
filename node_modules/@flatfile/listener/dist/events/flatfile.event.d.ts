import { AuthenticatedClient } from './authenticated.client';
import { Event, RecordsWithLinks } from '@flatfile/api/api';
import { EventCache } from './cache';
type GetDataOptions = {
    [key: string]: any;
};
interface GetData extends Function {
    (options?: GetDataOptions): Promise<any>;
    then<TResult1 = any, TResult2 = any>(onfulfilled?: ((value: any) => TResult1 | PromiseLike<TResult1>) | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | null): Promise<TResult1 | TResult2>;
}
export declare class FlatfileEvent extends AuthenticatedClient {
    readonly src: Event;
    /**
     * Event ID from the API
     *
     * @example us0_ev_82hgidh9skd
     * @readonly
     *
     */
    readonly id?: string;
    /**
     * Topic the event was produced on
     *
     * @example workbook:created
     * @readonly
     */
    readonly topic: string;
    readonly domain: string;
    readonly target: string;
    readonly origin: object;
    readonly action: string;
    readonly context: any;
    readonly payload: any;
    readonly cache: EventCache;
    readonly namespace: string[];
    readonly createdAt?: Date;
    /**
     * Fetch record data from Flatfile API via the event's dataUrl
     *
     * @async
     * @param {object} options
     * @returns {Promise<any>} JSON
     */
    data: GetData;
    constructor(src: Event, accessToken?: string, apiUrl?: string);
    /**
     * Should return either event body if expanded already or fetch data from the
     * signed dataURL
     */
    private fetchData;
    private afterAllCallbacks;
    afterAll<T>(callback: () => T, cacheKey?: string): void;
    update(records: RecordsWithLinks): Promise<void>;
    /**
     * Fetch the Secrets as indicated by this event context
     *
     * @param key - The name of the secret to fetch
     * @param options - (Optional) environmentId and spaceId to override event context
     *
     * @returns The value of the secret (usually a credential or token)
     */
    secrets(key: string, options?: {
        environmentId?: string;
        spaceId?: string;
    }): Promise<string>;
}
export type EventCallback = (evt: FlatfileEvent) => void;
export {};
//# sourceMappingURL=flatfile.event.d.ts.map