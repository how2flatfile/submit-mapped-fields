'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var pako = require('pako');
var wildMatch = require('wildcard-match');
var flat = require('flat');

// src/index.ts
var CrossEnvConfig = class {
  /**
   * Get a config value from either the environment or any registry overrides
   * @param prop
   */
  static get(prop) {
    return this.safeEnvLookup(prop);
  }
  /**
   * Set a value explicitly
   *
   * @param key
   * @param value
   */
  static set(key, value) {
    return this._overrides.set(key, value);
  }
  /**
   * Alias a key to another key if helpful. This is useful if you have different naming
   * constructs for different environments.
   *
   * @param from
   * @param to
   */
  static alias(from, to) {
    return this._aliases.set(from, to);
  }
  /**
   * Helpful if you've decided to store settings in another object and want to
   * make that available here. For example in client-side implementations you may reserve
   * a window.FLATFILE_CONFIG object to store settings.
   *
   * @param obj
   */
  static attachConfigRegistry(obj) {
    this._registry = obj;
  }
  /**
   * Use this to provide an override getter for config values. This is useful
   * if you need to dynamically look up values. Overrides will still take precedence.
   *
   * @param cb
   */
  static attachConfigFactory(cb) {
    this._factory = cb;
  }
  static reset() {
    this._overrides = /* @__PURE__ */ new Map();
    this._registry = void 0;
    this._factory = void 0;
  }
  /**
   * Internal function for traversing the possible environment sources for a value
   *
   * @param prop
   * @private
   */
  static safeEnvLookup(prop) {
    let values = [];
    if (this._overrides.get(prop)) {
      values.push(this._overrides.get(prop));
    }
    if (typeof this._registry === "object") {
      values.push(this._registry[prop]);
    }
    if (typeof this._factory === "function") {
      values.push(this._factory(prop));
    }
    if (typeof process === "object" && typeof process.env === "object") {
      values.push(process.env[prop]);
    }
    values.push(...this.checkForBrowserVariables(prop));
    const foundValue = values.find((v) => v !== void 0);
    if (foundValue !== void 0) {
      return foundValue;
    }
    const alias = this._aliases.get(prop);
    if (alias) {
      return this.safeEnvLookup(alias);
    }
    return void 0;
  }
  /**
   * Internal function for checking for stored variables in a browser-like environment
   *
   * @param prop
   * @private
   */
  static checkForBrowserVariables(prop) {
    let values = [];
    if (typeof window === "object") {
      const windowValue = window[`CROSSENV_${prop}`];
      if (windowValue !== void 0) {
        values.push(windowValue);
      }
      if (typeof sessionStorage === "object") {
        const storedValue = sessionStorage.getItem(`CROSSENV_${prop}`);
        if (storedValue !== null) {
          values.push(storedValue);
        }
      }
    }
    return values;
  }
};
CrossEnvConfig._overrides = /* @__PURE__ */ new Map();
/**
 * A map of aliases that can be used to look up config values.
 *
 * @private
 */
CrossEnvConfig._aliases = /* @__PURE__ */ new Map();

var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

function getDefaultExportFromCjs (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

var browserPonyfill = {exports: {}};

(function (module, exports) {
	// Save global object in a variable
	var __global__ =
	(typeof globalThis !== 'undefined' && globalThis) ||
	(typeof self !== 'undefined' && self) ||
	(typeof commonjsGlobal !== 'undefined' && commonjsGlobal);
	// Create an object that extends from __global__ without the fetch function
	var __globalThis__ = (function () {
	function F() {
	this.fetch = false;
	this.DOMException = __global__.DOMException;
	}
	F.prototype = __global__; // Needed for feature detection on whatwg-fetch's code
	return new F();
	})();
	// Wraps whatwg-fetch with a function scope to hijack the global object
	// "globalThis" that's going to be patched
	(function(globalThis) {

	((function (exports) {

	  var global =
	    (typeof globalThis !== 'undefined' && globalThis) ||
	    (typeof self !== 'undefined' && self) ||
	    (typeof global !== 'undefined' && global);

	  var support = {
	    searchParams: 'URLSearchParams' in global,
	    iterable: 'Symbol' in global && 'iterator' in Symbol,
	    blob:
	      'FileReader' in global &&
	      'Blob' in global &&
	      (function() {
	        try {
	          new Blob();
	          return true
	        } catch (e) {
	          return false
	        }
	      })(),
	    formData: 'FormData' in global,
	    arrayBuffer: 'ArrayBuffer' in global
	  };

	  function isDataView(obj) {
	    return obj && DataView.prototype.isPrototypeOf(obj)
	  }

	  if (support.arrayBuffer) {
	    var viewClasses = [
	      '[object Int8Array]',
	      '[object Uint8Array]',
	      '[object Uint8ClampedArray]',
	      '[object Int16Array]',
	      '[object Uint16Array]',
	      '[object Int32Array]',
	      '[object Uint32Array]',
	      '[object Float32Array]',
	      '[object Float64Array]'
	    ];

	    var isArrayBufferView =
	      ArrayBuffer.isView ||
	      function(obj) {
	        return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1
	      };
	  }

	  function normalizeName(name) {
	    if (typeof name !== 'string') {
	      name = String(name);
	    }
	    if (/[^a-z0-9\-#$%&'*+.^_`|~!]/i.test(name) || name === '') {
	      throw new TypeError('Invalid character in header field name: "' + name + '"')
	    }
	    return name.toLowerCase()
	  }

	  function normalizeValue(value) {
	    if (typeof value !== 'string') {
	      value = String(value);
	    }
	    return value
	  }

	  // Build a destructive iterator for the value list
	  function iteratorFor(items) {
	    var iterator = {
	      next: function() {
	        var value = items.shift();
	        return {done: value === undefined, value: value}
	      }
	    };

	    if (support.iterable) {
	      iterator[Symbol.iterator] = function() {
	        return iterator
	      };
	    }

	    return iterator
	  }

	  function Headers(headers) {
	    this.map = {};

	    if (headers instanceof Headers) {
	      headers.forEach(function(value, name) {
	        this.append(name, value);
	      }, this);
	    } else if (Array.isArray(headers)) {
	      headers.forEach(function(header) {
	        this.append(header[0], header[1]);
	      }, this);
	    } else if (headers) {
	      Object.getOwnPropertyNames(headers).forEach(function(name) {
	        this.append(name, headers[name]);
	      }, this);
	    }
	  }

	  Headers.prototype.append = function(name, value) {
	    name = normalizeName(name);
	    value = normalizeValue(value);
	    var oldValue = this.map[name];
	    this.map[name] = oldValue ? oldValue + ', ' + value : value;
	  };

	  Headers.prototype['delete'] = function(name) {
	    delete this.map[normalizeName(name)];
	  };

	  Headers.prototype.get = function(name) {
	    name = normalizeName(name);
	    return this.has(name) ? this.map[name] : null
	  };

	  Headers.prototype.has = function(name) {
	    return this.map.hasOwnProperty(normalizeName(name))
	  };

	  Headers.prototype.set = function(name, value) {
	    this.map[normalizeName(name)] = normalizeValue(value);
	  };

	  Headers.prototype.forEach = function(callback, thisArg) {
	    for (var name in this.map) {
	      if (this.map.hasOwnProperty(name)) {
	        callback.call(thisArg, this.map[name], name, this);
	      }
	    }
	  };

	  Headers.prototype.keys = function() {
	    var items = [];
	    this.forEach(function(value, name) {
	      items.push(name);
	    });
	    return iteratorFor(items)
	  };

	  Headers.prototype.values = function() {
	    var items = [];
	    this.forEach(function(value) {
	      items.push(value);
	    });
	    return iteratorFor(items)
	  };

	  Headers.prototype.entries = function() {
	    var items = [];
	    this.forEach(function(value, name) {
	      items.push([name, value]);
	    });
	    return iteratorFor(items)
	  };

	  if (support.iterable) {
	    Headers.prototype[Symbol.iterator] = Headers.prototype.entries;
	  }

	  function consumed(body) {
	    if (body.bodyUsed) {
	      return Promise.reject(new TypeError('Already read'))
	    }
	    body.bodyUsed = true;
	  }

	  function fileReaderReady(reader) {
	    return new Promise(function(resolve, reject) {
	      reader.onload = function() {
	        resolve(reader.result);
	      };
	      reader.onerror = function() {
	        reject(reader.error);
	      };
	    })
	  }

	  function readBlobAsArrayBuffer(blob) {
	    var reader = new FileReader();
	    var promise = fileReaderReady(reader);
	    reader.readAsArrayBuffer(blob);
	    return promise
	  }

	  function readBlobAsText(blob) {
	    var reader = new FileReader();
	    var promise = fileReaderReady(reader);
	    reader.readAsText(blob);
	    return promise
	  }

	  function readArrayBufferAsText(buf) {
	    var view = new Uint8Array(buf);
	    var chars = new Array(view.length);

	    for (var i = 0; i < view.length; i++) {
	      chars[i] = String.fromCharCode(view[i]);
	    }
	    return chars.join('')
	  }

	  function bufferClone(buf) {
	    if (buf.slice) {
	      return buf.slice(0)
	    } else {
	      var view = new Uint8Array(buf.byteLength);
	      view.set(new Uint8Array(buf));
	      return view.buffer
	    }
	  }

	  function Body() {
	    this.bodyUsed = false;

	    this._initBody = function(body) {
	      /*
	        fetch-mock wraps the Response object in an ES6 Proxy to
	        provide useful test harness features such as flush. However, on
	        ES5 browsers without fetch or Proxy support pollyfills must be used;
	        the proxy-pollyfill is unable to proxy an attribute unless it exists
	        on the object before the Proxy is created. This change ensures
	        Response.bodyUsed exists on the instance, while maintaining the
	        semantic of setting Request.bodyUsed in the constructor before
	        _initBody is called.
	      */
	      this.bodyUsed = this.bodyUsed;
	      this._bodyInit = body;
	      if (!body) {
	        this._bodyText = '';
	      } else if (typeof body === 'string') {
	        this._bodyText = body;
	      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
	        this._bodyBlob = body;
	      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
	        this._bodyFormData = body;
	      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
	        this._bodyText = body.toString();
	      } else if (support.arrayBuffer && support.blob && isDataView(body)) {
	        this._bodyArrayBuffer = bufferClone(body.buffer);
	        // IE 10-11 can't handle a DataView body.
	        this._bodyInit = new Blob([this._bodyArrayBuffer]);
	      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
	        this._bodyArrayBuffer = bufferClone(body);
	      } else {
	        this._bodyText = body = Object.prototype.toString.call(body);
	      }

	      if (!this.headers.get('content-type')) {
	        if (typeof body === 'string') {
	          this.headers.set('content-type', 'text/plain;charset=UTF-8');
	        } else if (this._bodyBlob && this._bodyBlob.type) {
	          this.headers.set('content-type', this._bodyBlob.type);
	        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
	          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
	        }
	      }
	    };

	    if (support.blob) {
	      this.blob = function() {
	        var rejected = consumed(this);
	        if (rejected) {
	          return rejected
	        }

	        if (this._bodyBlob) {
	          return Promise.resolve(this._bodyBlob)
	        } else if (this._bodyArrayBuffer) {
	          return Promise.resolve(new Blob([this._bodyArrayBuffer]))
	        } else if (this._bodyFormData) {
	          throw new Error('could not read FormData body as blob')
	        } else {
	          return Promise.resolve(new Blob([this._bodyText]))
	        }
	      };

	      this.arrayBuffer = function() {
	        if (this._bodyArrayBuffer) {
	          var isConsumed = consumed(this);
	          if (isConsumed) {
	            return isConsumed
	          }
	          if (ArrayBuffer.isView(this._bodyArrayBuffer)) {
	            return Promise.resolve(
	              this._bodyArrayBuffer.buffer.slice(
	                this._bodyArrayBuffer.byteOffset,
	                this._bodyArrayBuffer.byteOffset + this._bodyArrayBuffer.byteLength
	              )
	            )
	          } else {
	            return Promise.resolve(this._bodyArrayBuffer)
	          }
	        } else {
	          return this.blob().then(readBlobAsArrayBuffer)
	        }
	      };
	    }

	    this.text = function() {
	      var rejected = consumed(this);
	      if (rejected) {
	        return rejected
	      }

	      if (this._bodyBlob) {
	        return readBlobAsText(this._bodyBlob)
	      } else if (this._bodyArrayBuffer) {
	        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))
	      } else if (this._bodyFormData) {
	        throw new Error('could not read FormData body as text')
	      } else {
	        return Promise.resolve(this._bodyText)
	      }
	    };

	    if (support.formData) {
	      this.formData = function() {
	        return this.text().then(decode)
	      };
	    }

	    this.json = function() {
	      return this.text().then(JSON.parse)
	    };

	    return this
	  }

	  // HTTP methods whose capitalization should be normalized
	  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];

	  function normalizeMethod(method) {
	    var upcased = method.toUpperCase();
	    return methods.indexOf(upcased) > -1 ? upcased : method
	  }

	  function Request(input, options) {
	    if (!(this instanceof Request)) {
	      throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.')
	    }

	    options = options || {};
	    var body = options.body;

	    if (input instanceof Request) {
	      if (input.bodyUsed) {
	        throw new TypeError('Already read')
	      }
	      this.url = input.url;
	      this.credentials = input.credentials;
	      if (!options.headers) {
	        this.headers = new Headers(input.headers);
	      }
	      this.method = input.method;
	      this.mode = input.mode;
	      this.signal = input.signal;
	      if (!body && input._bodyInit != null) {
	        body = input._bodyInit;
	        input.bodyUsed = true;
	      }
	    } else {
	      this.url = String(input);
	    }

	    this.credentials = options.credentials || this.credentials || 'same-origin';
	    if (options.headers || !this.headers) {
	      this.headers = new Headers(options.headers);
	    }
	    this.method = normalizeMethod(options.method || this.method || 'GET');
	    this.mode = options.mode || this.mode || null;
	    this.signal = options.signal || this.signal;
	    this.referrer = null;

	    if ((this.method === 'GET' || this.method === 'HEAD') && body) {
	      throw new TypeError('Body not allowed for GET or HEAD requests')
	    }
	    this._initBody(body);

	    if (this.method === 'GET' || this.method === 'HEAD') {
	      if (options.cache === 'no-store' || options.cache === 'no-cache') {
	        // Search for a '_' parameter in the query string
	        var reParamSearch = /([?&])_=[^&]*/;
	        if (reParamSearch.test(this.url)) {
	          // If it already exists then set the value with the current time
	          this.url = this.url.replace(reParamSearch, '$1_=' + new Date().getTime());
	        } else {
	          // Otherwise add a new '_' parameter to the end with the current time
	          var reQueryString = /\?/;
	          this.url += (reQueryString.test(this.url) ? '&' : '?') + '_=' + new Date().getTime();
	        }
	      }
	    }
	  }

	  Request.prototype.clone = function() {
	    return new Request(this, {body: this._bodyInit})
	  };

	  function decode(body) {
	    var form = new FormData();
	    body
	      .trim()
	      .split('&')
	      .forEach(function(bytes) {
	        if (bytes) {
	          var split = bytes.split('=');
	          var name = split.shift().replace(/\+/g, ' ');
	          var value = split.join('=').replace(/\+/g, ' ');
	          form.append(decodeURIComponent(name), decodeURIComponent(value));
	        }
	      });
	    return form
	  }

	  function parseHeaders(rawHeaders) {
	    var headers = new Headers();
	    // Replace instances of \r\n and \n followed by at least one space or horizontal tab with a space
	    // https://tools.ietf.org/html/rfc7230#section-3.2
	    var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, ' ');
	    // Avoiding split via regex to work around a common IE11 bug with the core-js 3.6.0 regex polyfill
	    // https://github.com/github/fetch/issues/748
	    // https://github.com/zloirock/core-js/issues/751
	    preProcessedHeaders
	      .split('\r')
	      .map(function(header) {
	        return header.indexOf('\n') === 0 ? header.substr(1, header.length) : header
	      })
	      .forEach(function(line) {
	        var parts = line.split(':');
	        var key = parts.shift().trim();
	        if (key) {
	          var value = parts.join(':').trim();
	          headers.append(key, value);
	        }
	      });
	    return headers
	  }

	  Body.call(Request.prototype);

	  function Response(bodyInit, options) {
	    if (!(this instanceof Response)) {
	      throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.')
	    }
	    if (!options) {
	      options = {};
	    }

	    this.type = 'default';
	    this.status = options.status === undefined ? 200 : options.status;
	    this.ok = this.status >= 200 && this.status < 300;
	    this.statusText = options.statusText === undefined ? '' : '' + options.statusText;
	    this.headers = new Headers(options.headers);
	    this.url = options.url || '';
	    this._initBody(bodyInit);
	  }

	  Body.call(Response.prototype);

	  Response.prototype.clone = function() {
	    return new Response(this._bodyInit, {
	      status: this.status,
	      statusText: this.statusText,
	      headers: new Headers(this.headers),
	      url: this.url
	    })
	  };

	  Response.error = function() {
	    var response = new Response(null, {status: 0, statusText: ''});
	    response.type = 'error';
	    return response
	  };

	  var redirectStatuses = [301, 302, 303, 307, 308];

	  Response.redirect = function(url, status) {
	    if (redirectStatuses.indexOf(status) === -1) {
	      throw new RangeError('Invalid status code')
	    }

	    return new Response(null, {status: status, headers: {location: url}})
	  };

	  exports.DOMException = global.DOMException;
	  try {
	    new exports.DOMException();
	  } catch (err) {
	    exports.DOMException = function(message, name) {
	      this.message = message;
	      this.name = name;
	      var error = Error(message);
	      this.stack = error.stack;
	    };
	    exports.DOMException.prototype = Object.create(Error.prototype);
	    exports.DOMException.prototype.constructor = exports.DOMException;
	  }

	  function fetch(input, init) {
	    return new Promise(function(resolve, reject) {
	      var request = new Request(input, init);

	      if (request.signal && request.signal.aborted) {
	        return reject(new exports.DOMException('Aborted', 'AbortError'))
	      }

	      var xhr = new XMLHttpRequest();

	      function abortXhr() {
	        xhr.abort();
	      }

	      xhr.onload = function() {
	        var options = {
	          status: xhr.status,
	          statusText: xhr.statusText,
	          headers: parseHeaders(xhr.getAllResponseHeaders() || '')
	        };
	        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');
	        var body = 'response' in xhr ? xhr.response : xhr.responseText;
	        setTimeout(function() {
	          resolve(new Response(body, options));
	        }, 0);
	      };

	      xhr.onerror = function() {
	        setTimeout(function() {
	          reject(new TypeError('Network request failed'));
	        }, 0);
	      };

	      xhr.ontimeout = function() {
	        setTimeout(function() {
	          reject(new TypeError('Network request failed'));
	        }, 0);
	      };

	      xhr.onabort = function() {
	        setTimeout(function() {
	          reject(new exports.DOMException('Aborted', 'AbortError'));
	        }, 0);
	      };

	      function fixUrl(url) {
	        try {
	          return url === '' && global.location.href ? global.location.href : url
	        } catch (e) {
	          return url
	        }
	      }

	      xhr.open(request.method, fixUrl(request.url), true);

	      if (request.credentials === 'include') {
	        xhr.withCredentials = true;
	      } else if (request.credentials === 'omit') {
	        xhr.withCredentials = false;
	      }

	      if ('responseType' in xhr) {
	        if (support.blob) {
	          xhr.responseType = 'blob';
	        } else if (
	          support.arrayBuffer &&
	          request.headers.get('Content-Type') &&
	          request.headers.get('Content-Type').indexOf('application/octet-stream') !== -1
	        ) {
	          xhr.responseType = 'arraybuffer';
	        }
	      }

	      if (init && typeof init.headers === 'object' && !(init.headers instanceof Headers)) {
	        Object.getOwnPropertyNames(init.headers).forEach(function(name) {
	          xhr.setRequestHeader(name, normalizeValue(init.headers[name]));
	        });
	      } else {
	        request.headers.forEach(function(value, name) {
	          xhr.setRequestHeader(name, value);
	        });
	      }

	      if (request.signal) {
	        request.signal.addEventListener('abort', abortXhr);

	        xhr.onreadystatechange = function() {
	          // DONE (success or failure)
	          if (xhr.readyState === 4) {
	            request.signal.removeEventListener('abort', abortXhr);
	          }
	        };
	      }

	      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);
	    })
	  }

	  fetch.polyfill = true;

	  if (!global.fetch) {
	    global.fetch = fetch;
	    global.Headers = Headers;
	    global.Request = Request;
	    global.Response = Response;
	  }

	  exports.Headers = Headers;
	  exports.Request = Request;
	  exports.Response = Response;
	  exports.fetch = fetch;

	  return exports;

	}))({});
	})(__globalThis__);
	// This is a ponyfill, so...
	__globalThis__.fetch.ponyfill = true;
	delete __globalThis__.fetch.polyfill;
	// Choose between native implementation (__global__) or custom implementation (__globalThis__)
	var ctx = __global__.fetch ? __global__ : __globalThis__;
	exports = ctx.fetch; // To enable: import fetch from 'cross-fetch'
	exports.default = ctx.fetch; // For TypeScript consumers without esModuleInterop.
	exports.fetch = ctx.fetch; // To enable: import {fetch} from 'cross-fetch'
	exports.Headers = ctx.Headers;
	exports.Request = ctx.Request;
	exports.Response = ctx.Response;
	module.exports = exports; 
} (browserPonyfill, browserPonyfill.exports));

var browserPonyfillExports = browserPonyfill.exports;
var fetch = /*@__PURE__*/getDefaultExportFromCjs(browserPonyfillExports);

const ensureSingleTrailingSlash = (url) => {
    // Remove all trailing slashes
    while (url.endsWith('/')) {
        url = url.slice(0, -1);
    }
    // Append one slash
    return url + '/';
};

class AuthenticatedClient {
    constructor(accessToken, apiUrl) {
        const FLATFILE_API_URL = CrossEnvConfig.get('AGENT_INTERNAL_URL') || 'http://localhost:3000';
        const bearerToken = CrossEnvConfig.get('FLATFILE_BEARER_TOKEN');
        this._accessToken = accessToken || bearerToken || '...';
        this._apiUrl =
            apiUrl || FLATFILE_API_URL
                ? ensureSingleTrailingSlash(apiUrl || FLATFILE_API_URL)
                : undefined;
    }
    async fetch(url, options) {
        const headers = {
            Authorization: `Bearer ${this._accessToken}`,
            'x-disable-hooks': 'true',
            'Content-Type': 'application/json',
            ...options?.headers,
        };
        const fetchUrl = this._apiUrl + url;
        const fetchOptions = {
            method: options?.method || 'GET',
            headers,
            body: options?.data,
        };
        try {
            const response = await fetch(fetchUrl, fetchOptions);
            if (response.status >= 200 && response.status <= 399) {
                const contentType = response.headers.get('content-type');
                if (contentType && contentType.includes('application/json')) {
                    const responseData = (await response.json());
                    return responseData.data;
                }
                else {
                    const responseData = await response.text();
                    return responseData;
                }
            }
            else {
                throw new Error(`HTTP error! Status: ${response.status}`);
            }
        }
        catch (err) {
            console.log('event.fetch error: ', err);
        }
    }
    /**
     *
     * @deprecated use @flatfile/cross-env-config instead
     */
    setVariables({ accessToken, apiUrl, }) {
        this._accessToken = accessToken;
        this._apiUrl = apiUrl;
    }
}

class EventCache {
    constructor() {
        this.eventCache = new Map();
    }
    async init(key, callback) {
        if (this.eventCache.get(key)) {
            return this.eventCache.get(key);
        }
        else {
            const result = await callback();
            this.eventCache.set(key, result);
            return result;
        }
    }
    async set(key, callback) {
        if (this.eventCache.get(key)) {
            const result = await callback();
            this.eventCache.set(key, result);
            return result;
        }
        else {
            throw new Error('Cache key not found');
        }
    }
    get(key) {
        if (this.eventCache.get(key)) {
            return this.eventCache.get(key);
        }
        else {
            throw new Error('Cache key not found');
        }
    }
    delete(key) {
        if (!key) {
            this.eventCache.clear();
        }
        else if (this.eventCache.get(key)) {
            if (Array.isArray(key)) {
                key.forEach((k) => this.eventCache.delete(k));
            }
            else {
                this.eventCache.delete(key);
            }
        }
        else {
            throw new Error('Cache key not found');
        }
    }
}

class FlatfileEvent extends AuthenticatedClient {
    constructor(src, accessToken, apiUrl) {
        super(accessToken, apiUrl);
        this.src = src;
        this.afterAllCallbacks = new Map();
        this.cache = new EventCache();
        this.domain = src.domain;
        this.topic = src.topic;
        this.context = src.context; // -> [us0_acc_ihjh8943h9w, space_id, workbook_id]
        this.payload = src.payload;
        this.target = src.target || '';
        this.origin = src.origin || {};
        this.action = src.context?.actionName || '';
        this.namespace = src.namespaces || [];
        this.createdAt = src.createdAt || undefined;
        const data = async (options) => this.fetchData(options);
        data.then = (onfulfilled, onrejected) => {
            return this.data().then(onfulfilled, onrejected);
        };
        this.data = data;
    }
    /**
     * Should return either event body if expanded already or fetch data from the
     * signed dataURL
     */
    async fetchData(options) {
        const dataUrl = new URLSearchParams(this.src.dataUrl);
        if (options) {
            for (const [key, values] of Object.entries(options)) {
                if (Array.isArray(values)) {
                    for (const value of values) {
                        dataUrl.append(key, value);
                    }
                }
                else {
                    dataUrl.append(key, values);
                }
            }
        }
        const decodedURL = decodeURIComponent(dataUrl.toString());
        if (decodedURL) {
            return this.fetch(decodedURL);
        }
        else {
            return this.payload;
        }
    }
    afterAll(callback, cacheKey) {
        const key = cacheKey || callback.toString();
        if (!this.afterAllCallbacks.get(key)) {
            this.afterAllCallbacks.set(key, callback);
        }
    }
    async update(records, compressRequestBody = true) {
        if (!this.src.dataUrl) {
            throw new Error('Cannot set data on an event without a dataUrl');
        }
        // TODO: do we need to remove source from the messages array?
        records.map((record) => {
            record.messages?.map((message) => {
                delete message.source;
            });
        });
        const data = compressRequestBody
            ? pako.gzip(JSON.stringify(records))
            : records;
        const headers = compressRequestBody
            ? { 'Content-Encoding': 'gzip', 'Content-Length': data.length.toString() }
            : {};
        await this.fetch(this.src.dataUrl, {
            method: 'PUT',
            headers: headers,
            data,
        });
    }
    /**
     * Fetch the Secrets as indicated by this event context
     *
     * @param key - The name of the secret to fetch
     * @param options - (Optional) environmentId and spaceId to override event context
     *
     * @returns The value of the secret (usually a credential or token)
     */
    async secrets(key, options) {
        // Allow options overrides, then take from context, else are absent
        const environmentId = options?.environmentId || this.context.environmentId || '';
        const spaceId = options?.spaceId || this.context.spaceId || '';
        if (!environmentId) {
            throw new Error('environmentId is required to fetch secrets');
        }
        let getSecrets = `v1/secrets?environmentId=${environmentId}`;
        if (spaceId) {
            getSecrets += `&spaceId=${spaceId}`;
        }
        const secretCacheKey = `secrets:${environmentId}${spaceId && `:${spaceId}`}`;
        const secrets = await this.cache.init(secretCacheKey, async () => {
            const secretsResponse = await this.fetch(getSecrets);
            const SecretMap = new Map();
            secretsResponse?.forEach((secret) => {
                SecretMap.set(secret.name, secret.value);
            });
            return SecretMap;
        });
        const value = secrets.get(key);
        if (!value) {
            throw new Error(`Secret ${key} not found`);
        }
        return value;
    }
}

/**
 * Glob style matching of a value
 *
 * @param val
 * @param filter
 */
function glob(val, filter) {
    if (!val || typeof val !== 'string') {
        return false;
    }
    return wildMatch(filter || '**', ':')(val);
}
/**
 * Glob style matching of values in an object
 *
 * @param object
 * @param filterObject
 */
function objectMatches(object, filterObject) {
    const cleanFilter = !filterObject || typeof filterObject !== 'object'
        ? { '**': filterObject }
        : filterObject;
    if (typeof object !== 'object') {
        throw new Error('You cannot filter a non-object');
    }
    let denied = false;
    const filter = flat(cleanFilter, { safe: true });
    const flattened = flat(object, { safe: true });
    // all filters MUST resolve true
    for (const keyPattern in filter) {
        const keys = filterKeys(flattened, keyPattern);
        const valuePattern = (Array.isArray(filter[keyPattern])
            ? filter[keyPattern]
            : [filter[keyPattern]]);
        // only one filter must match
        denied || (denied = !keys.some((key) => {
            const value = flattened[key];
            return valuePattern.some((match) => globOrMatch(value, match));
        }));
    }
    return !denied;
}
/**
 * Glob keys of an object and return the narrowed set
 *
 * @param object
 * @param glob
 */
function filterKeys(object, glob) {
    glob = glob.includes('*') || glob.includes('.') ? glob : `**.${glob}`;
    const matcher = wildMatch(glob, '.');
    return Object.keys(object).filter((key) => matcher(key));
}
function globOrMatch(val, filter) {
    if (val === undefined || val === null) {
        return filter === null;
    }
    if (Array.isArray(val)) {
        return val.some((v) => globOrMatch(v, filter));
    }
    if (typeof filter === 'string') {
        return glob(val.toString(), filter);
    }
    // otherwise do a simple comparison
    return val === filter;
}

/**
 * EventHandler is a Flatfile flavored implementation of EventTarget
 */
class EventHandler extends AuthenticatedClient {
    constructor(filter, accessToken, apiUrl) {
        super(accessToken, apiUrl);
        /**
         * Cache of registered listeners on this instance
         * @private
         */
        this.listeners = [];
        /**
         * Cache of registered child nodes for this listener. These nodes will
         * only receive events that pass the parent filter.
         *
         * @private
         */
        this.nodes = [];
        if (filter) {
            this.filterQuery = filter;
        }
    }
    on(query, ...rest) {
        let filter = {};
        const callback = rest.pop();
        if (rest.length) {
            filter = rest.shift();
        }
        this.listeners.push([query, filter, callback]);
        return this;
    }
    /**
     * Add child nodes to send this event to as well
     *
     * @param node
     */
    addNode(node) {
        this.nodes.push(node);
        return this;
    }
    /**
     * Dispatch an event and resolve the promise once it has completed (or
     * errored
     *
     * @todo - is there a right order in which to resolve event listeners?
     *   Should it matter?
     *
     * @param event
     */
    async dispatchEvent(event) {
        if (!event)
            return;
        const eventPayload = event.src ? event.src : event;
        event = new FlatfileEvent(eventPayload, this._accessToken, this._apiUrl);
        await this.trigger(event, true);
        for (const [_key, cb] of event.afterAllCallbacks) {
            await cb(event);
        }
        event.cache.delete();
    }
    /**
     * @deprecated legacy shim for receiving events from the VM layer
     * @alias dispatchEvent
     * @param event
     */
    async routeEvent(event) {
        return this.dispatchEvent(event);
    }
    /**
     * Actually trigger the event listeners on this particular target
     *
     * @note It is safer for now to run this in series to avoid IO locks and
     *       potential race conditions and uncaught errors
     *
     * @param event
     * @param recursive
     */
    async trigger(event, recursive = false) {
        const listeners = this.getListeners(event, recursive);
        for (const cb of listeners) {
            await cb.callback(event);
        }
    }
    /**
     * Get any listeners from this target subscribing to this event
     *
     * @param event
     * @param recursive
     */
    getListeners(event, recursive = false) {
        // never return any listeners if the event doesn't match the filter
        // event recursion should not occur either
        if (!this.matchEvent(event, this.filterQuery)) {
            return [];
        }
        // look at listeners registered here
        const listeners = this.listeners
            .filter(([query, filter]) => {
            const globbed = glob(event.topic, query);
            const matched = this.matchEvent(event, filter);
            return globbed && matched;
        })
            .map(([query, filter, callback]) => ({ query, filter, callback }));
        return !recursive
            ? listeners
            : [
                ...listeners,
                ...this.nodes.flatMap((n) => n.getListeners(event, true)),
            ];
    }
    /**
     * Attach more event listeners using a callback function. Used most
     * frequently for plugins.
     *
     * @param fn
     */
    use(fn) {
        fn(this);
        return this;
    }
    /**
     * Filter an event out based on glob filter object
     *
     * @param event
     * @param filter
     */
    matchEvent(event, filter) {
        return filter ? objectMatches(event, filter) : true;
    }
}

/**
 * The Flatfile Listener
 *
 * The Flatfile PubSub Client is just a simple event subscriber. It can
 * receive events from any PubSub driver. The default drivers are:
 *
 * - Webhook    (for simply processing events sent to URL)
 * - Websocket  (for subscribing real time on an HTTP2 connection)
 * - Serverless (for stateless invocations via AWS Lambda or similar)
 *
 * Once an event is received, it is routed to any awaiting listeners which
 * are added with `addEventListener()` or its alias `on()`.
 *
 * Flatfile events follow a standard structure and event listeners can use
 * any of the following syntaxes to react to events within Flatfile.
 *
 * // listen to an event
 * addEventListener('entity:topic')
 *
 * // listen to an event on a specific namespace
 * addEventListener('entity:topic@namespace')
 *
 * // listen to a specific context on a namespace
 * addEventListener('entity:topic@namespace?context=us_sp_89234oihsdo')
 *
 * // filter by any
 * addEventListener('entity:topic@namespace?')
 *
 */
class FlatfileListener extends EventHandler {
    /**
     * Subscribe to events only within a certain namespace.
     *
     * @param namespace
     * @param cb
     */
    namespace(namespaces, cb) {
        return this.filter({ namespaces }, cb);
    }
    /**
     * Filter by namespace
     *
     * @param filter
     * @param cb
     */
    filter(filter, cb) {
        const client = new this.constructor(filter);
        this.addNode(client);
        cb?.(client);
        return client;
    }
    /**
     * Start subscribing to events
     *
     * @param cb
     */
    static create(cb) {
        const client = new this();
        cb(client);
        return client;
    }
    /**
     * Mount this client using an acceptable Event Driver
     */
    mount(driver) {
        driver.mountEventHandler(this);
        return this;
    }
}

class EventDriver {
    get handler() {
        if (!this._handler) {
            throw new Error('handler not registered yet');
        }
        return this._handler;
    }
    /**
     * Mount an event handler
     *
     * @param handler
     */
    mountEventHandler(handler) {
        this._handler = handler;
        return this;
    }
    /**
     * Dispatch an event
     *
     * @param e
     */
    dispatchEvent(e) {
        this.handler.dispatchEvent(e);
        return this;
    }
}

class Browser extends EventDriver {
    constructor({ apiUrl, accessToken, environmentId, }) {
        super();
        this._apiUrl = apiUrl;
        this._accessToken = accessToken;
        this._environmentId = environmentId || '';
    }
    mountEventHandler(handler) {
        handler.setVariables({
            accessToken: this._accessToken,
            apiUrl: this._apiUrl,
        });
        this._handler = handler;
        return this;
    }
}

/**
 * Flatfile's Virtual Machine is stateless / serverless. So when a new event
 * is handled, it will just call `handle(event)`.
 */
class FlatfileVirtualMachine extends EventDriver {
    /**
     * This method is triggered from within the Flatfile Core VM Runner. This
     * EventDriver does not have to listen for events because this method will
     * be invoked as necessary.
     *
     * @param event
     */
    handle(event) {
        this.dispatchEvent(event);
    }
    mountEventHandler(handler) {
        this._handler = handler;
        return this;
    }
}

/**
 * Backwards compatibility
 */
class Client extends FlatfileListener {
}

exports.AuthenticatedClient = AuthenticatedClient;
exports.Browser = Browser;
exports.Client = Client;
exports.EventDriver = EventDriver;
exports.EventHandler = EventHandler;
exports.FlatfileEvent = FlatfileEvent;
exports.FlatfileListener = FlatfileListener;
exports.FlatfileVirtualMachine = FlatfileVirtualMachine;
exports.default = FlatfileListener;
